[section:Axis Axis]

An [*Axis] maps input values to indices. It holds state specific to that axis, like the number of bins and any metadata. Must be [@https://en.cppreference.com/w/cpp/named_req/CopyConstructible CopyConstructible] and [@https://en.cppreference.com/w/cpp/named_req/CopyAssignable CopyAssignable].

[heading Associated Types]

* [link histogram.concepts.DiscreteAxis [*DiscreteAxis]]
* [link histogram.concepts.IntervalAxis [*IntervalAxis]]

[heading Required features]

* `A` is a type meeting the requirements of [*Axis]
* `a` is a value of type `A`
* `V` is the type accepted for conversion into an index
* `v` is a value of type `V`
* `I` is an alias for `boost::histogram::index_type`
* `i` is a value of type `I`

[table Valid expressions
[[Expression] [Return type] [Semantics, Pre/Post-conditions]]
[
  [`a.size()`]
  [`I`]
  [
    Const member function which returns the number of bins of the axis. All indices from `0` to `a.size() - 1` must be valid and address a bin of the axis.
  ]
]
[
  [`a.index(v)`]
  [`I`]
  [
    Const member function which maps a value to an index. The mapping must be injective: each value must be uniquely mapped to one index. If the value is not covered by the axis, return either `-1` or `a.size()`. The value `-1` indicates that the value is lower than the lowest value covered by the axis. The value `a.size()` indicates that the value is above the uppermost value covered by the axis. By convention, /NaN/-values are mapped to `a.size()`.
  ]
]
]

[heading Optional features]

* `A` is a type meeting the requirements of [*Axis]
* `a,b` are a values of type `A`
* `M` is a metadata type that is [@https://en.cppreference.com/w/cpp/named_req/CopyConstructible CopyConstructible] and [@https://en.cppreference.com/w/cpp/named_req/CopyAssignable CopyAssignable]
* `Alloc` is the allocator type of `A`, if `A` uses an allocator
* `os` is a value of type `std::basic_ostream<CharT, Traits>`
* `ar` is a value of an archive with Boost.Serialization semantics

[table Valid expressions
[[Expression] [Return type] [Semantics, Pre/Post-conditions]]
[
  [`a.update(v)`]
  [`std::pair<I, I>`]
  [
    Non-const member function which maps a value to an index (first argument of the returned pair) and offset (second argument of the returned pair). If the value is not covered by the axis, this method may grow the current axis size (`old_size`) by the number of bins needed to contain the value or more (`new_size`). If the value is below the lowest value covered by the axis, return index `0` and offset `new_size - old_size`. If the value is above the uppermost value covered by the axis, return index `new_size - 1` and a negative offset `old_size - new_size`. If the value is outside, but the axis is not enlarged, then return an index equivalent to  `a.index(v)` and offset `0`.
  ]
]
[
  [`a.options()`]
  [`unsigned`]
  [
    Static constexpr member function which returns the [headerref boost/histogram/axis/option.hpp axis options] for this axis.
  ]
]
[
  [`a.metadata()`]
  [`M`, `const M&`, or `M&`]
  [
    Const member function which a copy of or a const reference to the metadata associated with the axis, usually a label string. On top of that, a non-const member function may be provided which returns a non-const reference to the metadata, which allows to modify it.
  ]
]
[
  [`a.get_allocator()`]
  [`Alloc`]
  [
    Const member function which returns the allocator used by this axis. If this member function exists, also a constructor must exists so that `A(a.get_allocator())` is a valid expression.
  ]
]
[
  [`a == b`]
  [`bool`]
  [
     Compares two instances of `A` types and returns `true` if they have the same state. If `a` and `b` have attached metadata, they should only compare equal only if their metadata compare equal. Implementing `a == b` requires that you implement `a != b` as well. If the equality operator is not implemented, the library considers two axis instances equal if they have the same type, and unequal otherwise.
  ]
]
[
  [`a != b`]
  [`bool`]
  [
    Must be implemented if `a == b` is implemented and must be equal to `!(a == b)`.
  ]
]
[
  [`os << a`]
  [`std::basic_ostream<CharT, Traits>&`]
  [
    Streams a text representation of the axis. May not mutate `a`.
  ]
]
[
  [`ar & a`]
  []
  [
    Serializes `a` to the archive or loads serialized state from the archive.
  ]
]
]

[heading Models]

* [classref boost::histogram::axis::category]
* [classref boost::histogram::axis::integer]
* [classref boost::histogram::axis::regular]
* [classref boost::histogram::axis::variable]

[endsect]
