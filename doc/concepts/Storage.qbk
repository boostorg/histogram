[section:storage Storage]

A [*Storage] handles memory for the bin counters and provides a uniform vector-like interface for accessing cell values for reading and writing.

[heading Requirements]

A [*Storage] must be __CopyConstructible__, __CopyAssignable__, and __EqualComparable__.

* be default/copy/move constructable
* be copy/move assignable
* be equal comparable
* have nested types
  * `allocator_type`
  * `element_type`, which represent the bin count
  * `const_reference`, const reference of bin count
  * `scale_type`, type to scale the storage counters
* have the following methods and operators:
  * `void reset(std::size_t n)` which prepares n counters initialized to zero
  * `std::size_t size() const` get number of counters
  * `void increase(std::size_t index)` increment bin counter
  * `template <typename T> void add(std::size_t index, const T& x)` add value to bin counter
  * `const_reference operator[](std::size_t index) const` read bin counter
  * `storage_type& operator+=(const storage_type& other)` add another storage
  * `storage_type& operator*=(const scale_type& x)` multiply by scale type
* optionally, it can have the following method to support weighted increments:
  * `template <typename T> void add(std::size_t index, const boost::histogram::detail::weight_type<T>& w)`

[endsect]
