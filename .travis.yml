# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright Antony Polukhin 2014-2019.
# Copyright Hans Dembinski 2019.

#
# See https://svn.boost.org/trac/boost/wiki/TravisCoverals for description of the
# original file and how it can be used with Boost libraries.
#

sudo: false
language: cpp
os: linux

env:
  global:
    # Autodetect Boost branch
    - BRANCH=develop && [ "$TRAVIS_BRANCH" == "master" ] && BRANCH=master || true

    # Files, which coverage results must be ignored (files from other projects).
    # Example: - IGNORE_COVERAGE='*/boost/progress.hpp */filesystem/src/*'
    - IGNORE_COVERAGE=''

    - LIBRARY_DIR=$(basename $TRAVIS_BUILD_DIR)

    # Global options for sanitizers
    - UBSAN_OPTIONS=print_stacktrace=1
    - LSAN_OPTIONS=verbosity=1:log_threads=1

matrix:
  include:
    # - os: osx

    - name: "clang++"
      env: B2_ARGS='toolset=clang'
      compiler: clang

  #   - name: "gcc-8: no rtti, coverage, asan, ubsan"
  #     env: B2_ARGS='toolset=gcc-8 cxxflags="--coverage -fsanitize=address,leak,undefined -fno-sanitize-recover=undefined -fno-rtti" linkflags="--coverage -lasan -lubsan"'
  #     addons:
  #       apt:
  #         sources: ubuntu-toolchain-r-test
  #         packages: g++-8
  # after_success:
  #   # Copying Coveralls data to a separate folder
  #   - mkdir -p $TRAVIS_BUILD_DIR/coverals
  #   - find ../../../bin.v2/ -name "*.gcda" -exec cp "{}" $TRAVIS_BUILD_DIR/coverals/ \;
  #   - find ../../../bin.v2/ -name "*.gcno" -exec cp "{}" $TRAVIS_BUILD_DIR/coverals/ \;
  #   - find ../../../bin.v2/ -name "*.da" -exec cp "{}" $TRAVIS_BUILD_DIR/coverals/ \;
  #   - find ../../../bin.v2/ -name "*.no" -exec cp "{}" $TRAVIS_BUILD_DIR/coverals/ \;
  #   - wget https://github.com/linux-test-project/lcov/archive/v1.12.zip
  #   - unzip v1.12.zip
  #   - LCOV="`pwd`/lcov-1.12/bin/lcov --gcov-tool gcov-6"
  #
  #   # Preparing Coveralls data by changind data format to a readable one
  #   - $LCOV --directory $TRAVIS_BUILD_DIR/coverals --base-directory `pwd` --capture --output-file $TRAVIS_BUILD_DIR/coverals/coverage.info
  #
  #   # ... erasing /test/ /example/ folder data
  #   - $LCOV --remove $TRAVIS_BUILD_DIR/coverals/coverage.info "/usr*" "*/$LIBRARY_DIR/test/*" $IGNORE_COVERAGE "*/$LIBRARY_DIR/tests/*" "*/$LIBRARY_DIR/examples/*" "*/$LIBRARY_DIR/example/*" -o $TRAVIS_BUILD_DIR/coverals/coverage.info
  #
  #   # ... erasing data that is not related to this project directly
  #   - OTHER_LIBS=`grep "submodule .*" .gitmodules | sed 's/\[submodule\ "\(.*\)"\]/"\*\/boost\/\1\.hpp" "\*\/boost\/\1\/\*"/g'| sed "/\"\*\/boost\/$LIBRARY_DIR\/\*\"/d" | sed ':a;N;$!ba;s/\n/ /g'`
  #   - echo $OTHER_LIBS
  #   - eval "$LCOV --remove $TRAVIS_BUILD_DIR/coverals/coverage.info $OTHER_LIBS -o $TRAVIS_BUILD_DIR/coverals/coverage.info"
  #
  #   # Sending data to Coveralls
  #   - cd $TRAVIS_BUILD_DIR
  #   - gem install coveralls-lcov
  #   - coveralls-lcov coverals/coverage.info


before_install:
  # Cloning minimal set of Boost libraries
  - git clone -b $BRANCH --depth 10 https://github.com/boostorg/boost.git
  - cd boost
  - git submodule update --init --depth 10 tools/build tools/boostdep

  # Replacing Boost module with this project and installing Boost dependencies
  - rm -rf libs/$LIBRARY_DIR || true
  - mv $TRAVIS_BUILD_DIR libs/$LIBRARY_DIR
  - python tools/boostdep/depinst/depinst.py --git_args "--depth 10 --jobs 2" $LIBRARY_DIR
  - git status

  # Adding missing toolsets and preparing Boost headers
  - ./bootstrap.sh
  - ./b2 headers
  - |-
    echo "using gcc ;" >> ~/user-config.jam
    echo "using clang ;" >> ~/user-config.jam
    echo "using clang : 3.8 : clang++-3.8 ;" >> ~/user-config.jam
    echo "using clang : 4 : clang++-4.0 ;" >> ~/user-config.jam
    echo "using clang : 5 : clang++-5.0 ;" >> ~/user-config.jam
    echo "using clang : 6 : clang++-6.0 ;" >> ~/user-config.jam
    echo "using clang : 7 : clang++-7.0 ;" >> ~/user-config.jam
    echo "using clang : 8 : clang++-8.0 ;" >> ~/user-config.jam
    echo "using clang : libc++ : clang++-libc++ ;" >> ~/user-config.jam

script:
  - ./b2 -j2 $B2_ARGS libs/$LIBRARY_DIR/test
  - EXAMPLE_DIR=`ls libs/$LIBRARY_DIR/example*`
  - if [ -e $EXAMPLE_DIR ]; then
      ./b2 -j2 $B2_ARSG $EXAMPLE_DIR;
    fi
